service: serverless-processing

frameworkVersion: '>=1.28.0 <2.0.0'

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

custom:
  tableName: pipeline-configs-${self:provider.stage}
  bucketName: kinluek-serverless-processing-code-${self:provider.stage}
  bucketKey: consume.zip


provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage}
  region: eu-west-2

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  manage-pipeline:
    handler: bin/manage-pipeline
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: 2
          enabled: true
          arn:
            Fn::GetAtt:
              - PipelineConfigTable
              - StreamArn
    environment:
      ENV_NAME: ${self:provider.stage}
      CONSUMER_BUCKET: ${self:custom.bucketName}
      CONSUMER_KEY: ${self:custom.bucketKey}
      CONSUMER_ROLE:
        Fn::GetAtt:
          - ConsumerRole
          - Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
          - dynamodb:ListStreams
          - dynamodb:DescribeTable
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.tableName}
      - Effect: Allow
        Action:
          - sqs:TagQueue
          - sqs:CreateQueue
          - sqs:SetQueueAttributes
          - sqs:GetQueueAttributes
        Resource: arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:*
      - Effect: Allow
        Action:
          - lambda:CreateFunction,
          - lambda:UpdateFunctionEventInvokeConfig,
          - lambda:TagResource,
          - lambda:UpdateEventSourceMapping
          - lambda:PublishLayerVersion,
          - lambda:DeleteProvisionedConcurrencyConfig,
          - lambda:UpdateFunctionConfiguration,
          - lambda:CreateEventSourceMapping,
          - lambda:UntagResource,
          - lambda:PutFunctionConcurrency,
          - lambda:UpdateAlias,
          - lambda:UpdateFunctionCode,
          - lambda:PutProvisionedConcurrencyConfig,
          - lambda:PutFunctionEventInvokeConfig,
          - lambda:DeleteFunctionEventInvokeConfig,
          - lambda:DeleteFunction,
          - lambda:PublishVersion,
          - lambda:DeleteFunctionConcurrency,
          - lambda:DeleteEventSourceMapping,
          - lambda:CreateAlias
        Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:*:*

resources:
  Resources:
    PipelineConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    LambdaCodeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

    ConsumerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: serverless-consumer-role-${self:provider.stage}
        Description: The role used by the consumer functions
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "AllowLogs"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
          - PolicyName: "AllowPollSQS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Effect: "Allow"
                Action:
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ReceiveMessage"
                Resource: "arn:aws:sqs:${self:provider.region}:#{AWS::AccountId}:*"
